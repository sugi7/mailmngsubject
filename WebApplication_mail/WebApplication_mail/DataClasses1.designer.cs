#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.34014
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication_mail
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database1")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 拡張メソッドの定義
    partial void OnCreated();
    partial void InsertMailAddTable2(MailAddTable2 instance);
    partial void UpdateMailAddTable2(MailAddTable2 instance);
    partial void DeleteMailAddTable2(MailAddTable2 instance);
    partial void InsertUserTable2(UserTable2 instance);
    partial void UpdateUserTable2(UserTable2 instance);
    partial void DeleteUserTable2(UserTable2 instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Database1ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MailAddTable2> MailAddTable2
		{
			get
			{
				return this.GetTable<MailAddTable2>();
			}
		}
		
		public System.Data.Linq.Table<UserTable2> UserTable2
		{
			get
			{
				return this.GetTable<UserTable2>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MailAddTable")]
	public partial class MailAddTable2 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _使用者氏名;
		
		private string _ふりがな;
		
		private string _アドレス;
		
		private string _パスワード;
		
		private System.Nullable<System.DateTime> _登録日;
		
		private System.Nullable<System.DateTime> _削除日;
		
		private string _転送先;
		
    #region 拡張メソッドの定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void On使用者氏名Changing(string value);
    partial void On使用者氏名Changed();
    partial void OnふりがなChanging(string value);
    partial void OnふりがなChanged();
    partial void OnアドレスChanging(string value);
    partial void OnアドレスChanged();
    partial void OnパスワードChanging(string value);
    partial void OnパスワードChanged();
    partial void On登録日Changing(System.Nullable<System.DateTime> value);
    partial void On登録日Changed();
    partial void On削除日Changing(System.Nullable<System.DateTime> value);
    partial void On削除日Changed();
    partial void On転送先Changing(string value);
    partial void On転送先Changed();
    #endregion
		
		public MailAddTable2()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_使用者氏名", DbType="NChar(10)")]
		public string 使用者氏名
		{
			get
			{
				return this._使用者氏名;
			}
			set
			{
				if ((this._使用者氏名 != value))
				{
					this.On使用者氏名Changing(value);
					this.SendPropertyChanging();
					this._使用者氏名 = value;
					this.SendPropertyChanged("使用者氏名");
					this.On使用者氏名Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ふりがな", DbType="NChar(10)")]
		public string ふりがな
		{
			get
			{
				return this._ふりがな;
			}
			set
			{
				if ((this._ふりがな != value))
				{
					this.OnふりがなChanging(value);
					this.SendPropertyChanging();
					this._ふりがな = value;
					this.SendPropertyChanged("ふりがな");
					this.OnふりがなChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_アドレス", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string アドレス
		{
			get
			{
				return this._アドレス;
			}
			set
			{
				if ((this._アドレス != value))
				{
					this.OnアドレスChanging(value);
					this.SendPropertyChanging();
					this._アドレス = value;
					this.SendPropertyChanged("アドレス");
					this.OnアドレスChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_パスワード", DbType="NChar(10)")]
		public string パスワード
		{
			get
			{
				return this._パスワード;
			}
			set
			{
				if ((this._パスワード != value))
				{
					this.OnパスワードChanging(value);
					this.SendPropertyChanging();
					this._パスワード = value;
					this.SendPropertyChanged("パスワード");
					this.OnパスワードChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_登録日", DbType="Date")]
		public System.Nullable<System.DateTime> 登録日
		{
			get
			{
				return this._登録日;
			}
			set
			{
				if ((this._登録日 != value))
				{
					this.On登録日Changing(value);
					this.SendPropertyChanging();
					this._登録日 = value;
					this.SendPropertyChanged("登録日");
					this.On登録日Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_削除日", DbType="Date")]
		public System.Nullable<System.DateTime> 削除日
		{
			get
			{
				return this._削除日;
			}
			set
			{
				if ((this._削除日 != value))
				{
					this.On削除日Changing(value);
					this.SendPropertyChanging();
					this._削除日 = value;
					this.SendPropertyChanged("削除日");
					this.On削除日Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_転送先", CanBeNull=false)]
		public string 転送先
		{
			get
			{
				return this._転送先;
			}
			set
			{
				if ((this._転送先 != value))
				{
					this.On転送先Changing(value);
					this.SendPropertyChanging();
					this._転送先 = value;
					this.SendPropertyChanged("転送先");
					this.On転送先Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserTable")]
	public partial class UserTable2 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _氏名;
		
		private string _役職;
		
		private string _職場;
		
		private string _所属;
		
    #region 拡張メソッドの定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void On氏名Changing(string value);
    partial void On氏名Changed();
    partial void On役職Changing(string value);
    partial void On役職Changed();
    partial void On職場Changing(string value);
    partial void On職場Changed();
    partial void On所属Changing(string value);
    partial void On所属Changed();
    #endregion
		
		public UserTable2()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_氏名", DbType="NChar(10)")]
		public string 氏名
		{
			get
			{
				return this._氏名;
			}
			set
			{
				if ((this._氏名 != value))
				{
					this.On氏名Changing(value);
					this.SendPropertyChanging();
					this._氏名 = value;
					this.SendPropertyChanged("氏名");
					this.On氏名Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_役職", DbType="NChar(10)")]
		public string 役職
		{
			get
			{
				return this._役職;
			}
			set
			{
				if ((this._役職 != value))
				{
					this.On役職Changing(value);
					this.SendPropertyChanging();
					this._役職 = value;
					this.SendPropertyChanged("役職");
					this.On役職Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_職場", DbType="NChar(10)")]
		public string 職場
		{
			get
			{
				return this._職場;
			}
			set
			{
				if ((this._職場 != value))
				{
					this.On職場Changing(value);
					this.SendPropertyChanging();
					this._職場 = value;
					this.SendPropertyChanged("職場");
					this.On職場Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_所属", DbType="NChar(10)")]
		public string 所属
		{
			get
			{
				return this._所属;
			}
			set
			{
				if ((this._所属 != value))
				{
					this.On所属Changing(value);
					this.SendPropertyChanging();
					this._所属 = value;
					this.SendPropertyChanged("所属");
					this.On所属Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
